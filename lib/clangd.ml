open Core
open Project

let to_compile_flags_txt ~(config : Project_config.t) (project : avr_project) =
  let module C = Compiler_args in
  let target =
    let open Project_config in
    let convert_mcu mcu =
      let pat = Re.compile @@ Re.Pcre.re {|(\d+\w*)+$|} in
      let match' = List.hd_exn @@ Re.matches pat mcu in

      String.lowercase mcu
      |> String.substr_replace_first ~pattern:"at" ~with_:"AT"
      |> String.substr_replace_first ~pattern:match'
           ~with_:(String.uppercase match')
      |> sprintf "__AVR_%s__"
    in

    let f = function
      | { mcu; hz = Some hz } ->
          [ sprintf "-D%s" (convert_mcu mcu); sprintf "-DF_CPU=%d" hz ]
      | { mcu; hz = None } -> [ sprintf "-D%s" (convert_mcu mcu) ]
    in
    Option.value_map ~default:[] ~f config.target
  in

  let resources =
    List.map project.resources ~f:(fun res_path ->
        let filename = Filename.basename res_path in
        sprintf "%s/%s.h" config.layout.out_dir
          (sprintf "%s_%s" (Util.hash_path res_path) filename))
    |> Array.of_list
  in

  List.concat
    [
      [ "# This file is generated by bavar, edit LabAvrProject instead" ];
      Compiler_args.strict_flags;
      target;
      (* C.of_build_options (build_options); *)
      C.to_headers
      @@ project.root_dir
         :: Filename.concat project.root_dir config.layout.root_dir
         :: List.map project.depends ~f:(fun p -> p.root_dir);
      [ "-I"; "/usr/avr/include" ] (* FIXME: hardcode paths *);
      C.to_includes project.includes;
      C.to_includes resources;
      C.to_includes @@ Array.of_list Compiler_args.default_include_headers;
    ]
